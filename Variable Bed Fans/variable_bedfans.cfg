################################################################################################
# This is an adaptation of Ellis' bed fans macro.
# https://github.com/AndrewEllis93/VoronUsers/tree/master/printer_mods/Ellis/Bed_Fans
#
# There is some tuning and PID knowledge involved here. It's not for the feint of heart.
#
# This works by monitoring the difference between target tempurature and actual temperature,
# as well as the difference between target power useage and actual power usage.
#
# As the bed heats up, we want all the heater power to go to heating the bed.
# So, the bed fans are kept on slow speed until the temperature gets within 2 degrees of target.
# At this point, the monitoring loop switches to the adjustment loop.
#
# Since the heater PID can set the power to low values while the bed temp is lower than target,
# simply using a factor of power to control the fans will result in times when the fan speed
# is very high when the bed temperature is still climbing.
# Therefore, a temperature factor is included so the fans stay at lower speeds until closer
# to the target temperature.
#
# If the temperature is low, and power is low, the fans should stay slow.
# If the temperature is at target, but the power is low, the fans should stay slow.
# if the power is at target, but the temperature is low, the fans should stay slow.
# If the temperature is at or above target, and power is at or above target, the fans should be fast.
# Etc. Too many permutations to address, but you get the idea.
#
# The coefficients are a bit of trial and error to tune.
# The bed temp will oscillate a bit during initial warm up. I have tried to minimise this by
# adjusting the coefficients. You'll have to do the same because of your setup.
# Start low, around 0.1 each.
# Watch how the fans work against the heater. If the heater never reaches target power,
# but the bed comes up to temp well, try bumping cp up by 0.1.
# If the fans come on too early and cause the bed to never heat fully or the temp constantly
# bounces out of the 2 degree range, try lowering ct a bit.
# on my Voron 2.4 350 with the standard bed and heater, my coefficients are:
# cp = 0.25
# ct = 0.1
#
# The variables are explained in the comments following them
# Setting the power use is really up to you, but you'll need to leave a bit of headroom for the
# system to work. Setting it at the max allowed heater power will cause the bed to never fully heat.
# Setting it too low means you're not using all the available power to heat the chamber.
#
# This macro resulted in a much more fine tuned bed fan speed and about five degrees hotter chamber.
# Also, the chamber heats faster once the bed is up to temp.
# The changes aren't drastic, but they're significant.
#
# Thanks for giving this a try. If you have suggestions or changes, make an issue on github.
# I am not a github guru, so be patient, I'll try to work it out as I have time.
################################################################################################


############### Config options ##################

[gcode_macro bedfanvars]
variable_threshold: 100        # If bed temp target is above this threshold, fans will be enabled. If temp is set to below this threshold, fans will be disabled.
variable_fast: 0.5             # Fan speed once bed temp is reached  
variable_slow: 0.05            # Fan speed while bed is heating
variable_power: 0.55           # Target power usage
variable_cp: 0.25              # Power coefficient
variable_ct: 0.1               # Temperature coefficient
gcode:

########## Bed Fans #########

[fan_generic BedFans_L]
pin: PA2
#cycle_time: 0.05
kick_start_time: 0.5

[fan_generic BedFans_ML]
pin: PA15
#cycle_time: 0.05
kick_start_time: 0.5

[fan_generic BedFans_MR]
pin: PB10
#cycle_time: 0.05
kick_start_time: 0.5

[fan_generic BedFans_R]
pin: PD14
#cycle_time: 0.05
kick_start_time: 0.5

########## Aliases #########

[gcode_macro BedFansSlow]
description: Set bed fans to slow speed
gcode:
    # Vars
    {% set SLOW = printer["gcode_macro bedfanvars"].slow|float %}
    
    SET_FAN_SPEED FAN=BedFans_L SPEED={SLOW}
    SET_FAN_SPEED FAN=BedFans_ML SPEED={SLOW}
    SET_FAN_SPEED FAN=BedFans_MR SPEED={SLOW}
    SET_FAN_SPEED FAN=BedFans_R SPEED={SLOW}

[gcode_macro BedFansFast]
description: Set bed fans to high speed
gcode:
    # Vars
    {% set FAST = printer["gcode_macro bedfanvars"].fast|float %}
    
    SET_FAN_SPEED FAN=BedFans_L SPEED={FAST}
    SET_FAN_SPEED FAN=BedFans_ML SPEED={FAST}
    SET_FAN_SPEED FAN=BedFans_MR SPEED={FAST}
    SET_FAN_SPEED FAN=BedFans_R SPEED={FAST}

[gcode_macro BedFansOff]
description: Turn off bed fans
gcode:
    SET_FAN_SPEED FAN=BedFans_L SPEED=0
    SET_FAN_SPEED FAN=BedFans_ML SPEED=0
    SET_FAN_SPEED FAN=BedFans_MR SPEED=0
    SET_FAN_SPEED FAN=BedFans_R SPEED=0

############ Command overrides ############

# Override, set fan speeds to low and start monitoring loop.
[gcode_macro SET_HEATER_TEMPERATURE]
description: Sets heater temperature and activates bed fans (replaces M104)
rename_existing: _SET_HEATER_TEMPERATURE
gcode:
    # Parameters
    {% set HEATER = params.HEATER|default("None") %}
    {% set TARGET = params.TARGET|default(0)|int %}
    # Vars
    {% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}
    
    {% if HEATER|lower == "extruder" %}
        M104 S{TARGET}
    {% elif HEATER|lower == "heater_bed" %}
        M99140 S{TARGET}
    {% else %}
        {action_respond_info("Heater %s not supported" % HEATER)}
    {% endif %}

    # Set fans to low if heater_bed temp is requested above threshold temp, and kick off monitoring loop.
    {% if HEATER|lower == "heater_bed" %}
        {% if TARGET >= THRESHOLD %}
            BedFansSlow
            UPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1
        {% else %}
            BedFansOff
            UPDATE_DELAYED_GCODE ID=bedfanloop DURATION=0 #    Cancel bed fan loop if it's running
        {% endif %}
    {% endif %}
    
# Override M190 (Wait for Bed Temperature)
# As a bonus, use TEMPERATURE_WAIT so we don't have to wait for PID to level off.
[gcode_macro M190]
description: Sets bed temperature (replaces M190)
rename_existing: M99190
gcode:
    # Parameters
    {% set S = params.S|int %}
    # Vars
    {% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}
    
    {% if S >= THRESHOLD %}
        BedFansSlow                                                                # >= Threshold temp: Low speed fans while heating 
    {% else %}
        BedFansOff                                                                # < Threshold temp: Turn bed fans off
    {% endif %}                                        

    M140 {% for p in params
      %}{'%s%s' % (p, params[p])}{%
      endfor %}                                                                    # Set bed temp
      
    {% if S != 0 %}
        TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={S|int} MAXIMUM={S|int + 5}    # Wait for bed temp within 5 degrees
    {% endif %}

    # Post-heating fan speeds
    {% if S >= THRESHOLD %}                                    
        UPDATE_DELAYED_GCODE ID=bedfanloop DURATION=1                          # When target temp ios above threshold temp, monitor and adjust fans
    {% endif %}
    
# Replace M140 (Set Bed Temperature) to just be an alias of SET_HEATER_TEMPERATURE (which has associated bed fan logic if enabled)
[gcode_macro M140]
description: Sets bed temperature (replaces M140)
rename_existing: M99140
gcode:
    # Parameters
    {% set S = params.S|float %}
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={S}
    
# Replace TURN_OFF_HEATERS
[gcode_macro TURN_OFF_HEATERS]
description: Turns off heaters and bedfans
rename_existing: _TURN_OFF_HEATERS
gcode:
    BedFansOff
    _TURN_OFF_HEATERS
    
################ Monitoring loop #####################
# Turns on monitoring loop when temp is within 2 degrees of target temp

[delayed_gcode bedfanloop]
gcode:
    # Vars
    {% set THRESHOLD = printer["gcode_macro bedfanvars"].threshold|int %}
    {% set FAST = printer["gcode_macro bedfanvars"].fast|float %}
    {% set POWER = printer["gcode_macro bedfanvars"].power|float %}
    {% set CP = printer["gcode_macro bedfanvars"].cp|float %}
    {% set CT = printer["gcode_macro bedfanvars"].ct|float %}
    
    {% if printer.heater_bed.target >= THRESHOLD %}                                               # Continue only if target temp greater than threshold.
        {% if printer.heater_bed.temperature|int >= (printer.heater_bed.target|int - 2) %}        # Set active range on +0/-2 degrees. This is wider than the original bedfans macro so the control loop has more room to work
            {% set DP = printer.heater_bed.power|float - POWER %}                                 # calculate difference in power and target power
            {% set DT = printer.heater_bed.temperature|float - printer.heater_bed.target|int %}   # Difference in temperature
            #{action_respond_info("dP = %s " % DP)}                                               # debug info
            #{action_respond_info("dT = %s " % DT)}                                               # debug info
                SET_FAN_SPEED FAN=BedFans_L SPEED={FAST + CP * DP + CT * DT}                      # bump speed up or down % of delta
                SET_FAN_SPEED FAN=BedFans_ML SPEED={FAST + CP * DP + CT * DT}                     # Set the coefficent to suit the printer.
                SET_FAN_SPEED FAN=BedFans_MR SPEED={FAST + CP * DP + CT * DT}
                SET_FAN_SPEED FAN=BedFans_R SPEED={FAST + CP * DP + CT * DT}
        {% else %}
            BedFansSlow                                                                           # don't adjust until temp is reached.
        {% endif %}
        UPDATE_DELAYED_GCODE ID=bedfanloop DURATION=5                                             # keep going every X seconds. I have found 5 is pretty good when the bed is hot.
    {% endif %}
